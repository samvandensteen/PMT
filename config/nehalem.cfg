#  This file is part of the program: Processor Modeling Tool (PMT).
#
#  PMT is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  PMT is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with PMT.  If not, see <http://www.gnu.org/licenses/>.
#
#  Authors: Sam Van den Steen, Ghent University
#  Copyright: 2016, Ghent University

[CORE]
dispatch_width = 4
rs_entries = 43
window_size = 128
front_end_pipeline = 8

[L1I]
type = cache
content = instructions
level = 1
shared = false
tag_time = 1
# NOTE: in Sniper this is set to 4 (same as L1D), but there's bypassing implemented (source: Trevor)
data_access_time = 1
size = 32
line_size = 64
associativity = 4
prefetcher = none

[L1D]
type = cache
content = data
level = 1
shared = false
tag_time = 1
data_access_time = 4
size = 32
line_size = 64
associativity = 8
prefetcher = none

[MSHR]
entries = 10

[L2]
type = cache
content = both
level = 2
shared = false
tag_time = 3
data_access_time = 8
size = 256
line_size = 64
associativity = 8
prefetcher = none

[L3]
type = cache
content = both
level = 3
shared = false
tag_time = 10
data_access_time = 30
size = 8192
line_size = 64
associativity = 16
prefetcher = stride

[PREFETCHER]
type = stride
# number of loads for which we can prefetch simultaneously
flows = 16
# prefetch over memory pages or not
prefetch_in_page = true

[ITLB]
entries = 64
content = instructions
level = 1
line_size = 4096
penalty = 30

[DTLB]
entries = 64
content = data
level = 1
line_size = 4096
penalty = 30

[BUS]
# 64 byte / 7.6 GB/s * 2.66 GHz
transfer_cycles = 22.4

[DRAM]
# 45 ns * 2.66 GHz
data_access_time = 119.7
# DRAM page size in bytes
page_size = 4096

[BRANCH]
name = pentium_M
type = t
ipBits_Pht = 9
size_bhr = 6

[INSTRUCTION_LATENCIES]
COND_BRANCH = 1
UNCOND_BRANCH = 1
CHNGREG = 1
I_ADD = 1
I_SUB = 1
I_MUL = 3
I_DIV = 28
FP_ADD = 3
FP_SUB = 3
FP_MUL = 4
FP_DIV = 14
FP_SQRT = 18
GENERIC_1 = 1
GENERIC_2 = 2
GENERIC_3 = 3
GENERIC_5 = 5
# LOAD latency is calculated with the average accesses to different cache levels
LOAD = 0
OTHER = 1
STORE = 1

[FUNCTIONAL_UNITS_PORT]
# ' | ' is used when it occupies one of those ports, ' & ' is used when it occupies both ports
# ' | ' takes precedence over ' & '
ALU = PORT0 | PORT1 | PORT5
# might be the complex integer unit from
# http://www.hardwaresecrets.com/fullimage.php?image=12261
INT_MULTIPLIER = PORT1
SSE_INT_ALU_1 = PORT0
SSE_INT_ALU_2 =  PORT5
# not quite sure whether multiplier and divider are a seperate functional unit: first source says it isn't second says it is
# http://www.realworldtech.com/nehalem/6/
# http://www.hardwaresecrets.com/fullimage.php?image=12261
# unlikely that division and multiply can be done by the same unit since multiplies can happen pipelined and division can't
FP_MULTIPLIER = PORT0
DIVIDER = PORT0
FP_ADDER = PORT1
SSE_INT_MULTIPLY = PORT1
LOAD_UNIT = PORT2
STORE_UNIT = PORT3 & PORT4
BRANCH_UNIT = PORT5

[FUNCTIONAL_UNITS_PIPELINED]
ALU = 1
INT_MULTIPLIER = 1
SSE_INT_ALU_1 = 0
SSE_INT_ALU_2 = 0
FP_MULTIPLIER = 1
DIVIDER = 0
FP_ADDER = 1
SSE_INT_MULTIPLY = 0
LOAD_UNIT = 1
STORE_UNIT = 1
BRANCH_UNIT = 1

[INSTRUCTION_FUNCTIONAL_UNIT]
BRANCH = BRANCH_UNIT
CHNGREG = ALU
I_ADD = ALU
I_SUB = ALU
I_MUL = INT_MULTIPLIER
I_DIV = DIVIDER
FP_ADD = FP_ADDER
FP_SUB = FP_ADDER
FP_MUL = FP_MULTIPLIER
FP_DIV = DIVIDER
FP_SQRT = DIVIDER
# not per se completely correct, but we only know the ports the instructions go through, so we look for the functional unit that could correspond with it
# http://agner.org/optimize/instruction_tables.pdf
GENERIC_1 = SSE_INT_ALU_1 | SSE_INT_ALU_2
GENERIC_2 = SSE_INT_ALU_1
# MAX/MIN..-ops which are put in the generic_3 category are SIMD operations http://x86.renejeschke.de/html/file_module_x86_id_166.html
GENERIC_3 = SSE_INT_MULTIPLY
# All CVT...-operations are SIMD operations, mostly sent to port1
# http://agner.org/optimize/instruction_tables.pdf
# http://www.jaist.ac.jp/iscenter-new/mpc/altix/altixdata/opt/intel/vtune/doc/users_guide/mergedProjects/analyzer_ec/mergedProjects/reference_olh/mergedProjects/instructions/instruct32_hh/vc61.htm
GENERIC_5 = SSE_INT_MULTIPLY
LOAD = LOAD_UNIT
OTHER = ALU
STORE = STORE_UNIT
